{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","src","alt","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,sFCgBhKC,EAdI,SAACC,GAClB,OACE,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACE,eAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAjC,UACE,qBACEC,IAAI,4DACJC,IAAI,KAELR,EAAMS,WCDAC,EARC,SAACV,GACf,OACE,8BACE,qBAAKC,UAAWC,IAAES,QAAlB,SAA4BX,EAAMW,a,yDCGlCC,EAAcC,YAAiB,IAsBtBC,cAAU,CACvBC,KAAM,2BADOD,EApBQ,SAACd,GACtB,OACE,8BACE,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXX,KAAK,iBACLY,YAAY,qBACZC,SAAU,CAACC,IAAUX,OAGzB,8BACE,oDCaKY,EA7BC,SAACxB,GACf,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GACvC,OAAO,cAAC,EAAD,CAAYxB,GAAIwB,EAAExB,GAAIG,KAAMqB,EAAErB,MAAWqB,EAAExB,OAEhDyB,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GACzC,OAAO,cAAC,EAAD,CAAS3B,GAAI2B,EAAE3B,GAAIK,QAASsB,EAAEtB,SAAcsB,EAAE3B,OAOvD,OAAKN,EAAMkC,OAGT,sBAAKjC,UAAWC,IAAE0B,QAAlB,UACE,qBAAK3B,UAAWC,IAAEiC,aAAlB,SAAiCR,IACjC,sBAAK1B,UAAWC,IAAE8B,SAAlB,UACGD,EACD,8BACE,cAAC,EAAD,CAAgBf,SAZJ,SAACoB,GACnBpC,EAAMqC,YAAYD,EAAOE,2BAGD,cAAC,IAAD,CAAUjC,GAAG,a,+CCfrCkC,EAA6B,SAACd,GAChC,MAAO,CACLS,OAAQT,EAAMe,KAAKN,S,OCWRO,sBACbC,aAdoB,SAACjB,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAGE,SAACiB,GACxB,MAAO,CACLN,YAAa,SAACC,GACZK,EAASC,YAAmBN,UDFF,SAACO,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAK/C,MAAMkC,OACT,cAACW,EAAD,eAAeE,KAAK/C,QADI,cAAC,IAAD,CAAUK,GAAG,gBAHH,GACb2C,IAAMH,WAWtC,OAJqCH,YAAQH,EAARG,CACnCI,KCFWL,CAGbjB","file":"static/js/4.7cda75a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1ZcGU\",\"dialogsItems\":\"Dialogs_dialogsItems__2CWgh\",\"active\":\"Dialogs_active__2rcWj\",\"dialog\":\"Dialogs_dialog__1x-g7\",\"messages\":\"Dialogs_messages__2CnLO\"};","import s from \"./../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n  return (\n    <div className={s.dialog + \" \" + s.active}>\n      <NavLink to={\"/dialogs/\" + props.id}>\n        <img\n          src=\"https://vectorified.com/images/mystery-person-icon-34.jpg\"\n          alt=\"\"\n        />\n        {props.name}\n      </NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.css\";\n\nconst Message = (props) => {\n  return (\n    <div>\n      <div className={s.message}>{props.message}</div>\n    </div>\n  );\n};\n\nexport default Message;\n","import { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\nimport {\n  maxLengthCreator,\n  required,\n} from \"../../../utils/validators/validators\";\nimport React from \"react\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        <div>\n          <Field\n            component={Textarea}\n            name=\"newMessageBody\"\n            placeholder=\"Enter your message\"\n            validate={[required, maxLength50]}\n          ></Field>\n        </div>\n        <div>\n          <button>Send</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default reduxForm({\n  form: \"dialog-add-message-form\",\n})(AddMessageForm);\n","import s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\n\nconst Dialogs = (props) => {\n  let state = props.dialogsPage;\n\n  let dialogsElements = state.dialogs.map((d) => {\n    return <DialogItem id={d.id} name={d.name} key={d.id}></DialogItem>;\n  });\n  let messagesElements = state.messages.map((m) => {\n    return <Message id={m.id} message={m.message} key={m.id}></Message>;\n  });\n\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  if (!props.isAuth) return <Redirect to=\"./login\" />;\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogsElements}</div>\n      <div className={s.messages}>\n        {messagesElements}\n        <div>\n          <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React from \"react\";\n\nimport { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) return <Redirect to=\"./login\" />;\n      return <Component {...this.props} />;\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n\n  return ConnectedAuthRedirectComponent;\n};\n","import { sendMessageCreator } from \"./../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}