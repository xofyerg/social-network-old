{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","s","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","styles","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","formData","a","then","descriptionBlock","mainPhoto","src","photos","large","userPhoto","alt","target","files","length","initialValues","Post","item","message","itemLike","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","component","name","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.1357305d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__211ka\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2c17G\",\"contact\":\"ProfileInfo_contact__2EkaA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__oblJU\",\"posts\":\"MyPosts_posts__1sTkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2qeqO\",\"itemLike\":\"Post_itemLike__3s3Et\"};","import React, { useEffect, useState } from \"react\";\n\nconst ProfileStatusWithHooks = (props) => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]); // если статус в глобальном state изменился, запускай setStatus\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span onDoubleClick={activateEditMode}>\n            {\"Status: \" + props.status || \"No status\"}\n          </span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onBlur={deactivateEditMode}\n            onChange={onStatusChange}\n            value={status}\n            autoFocus={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import {\n  createField,\n  Input,\n  Textarea,\n} from \"../../common/FormsControls/FormsControls\";\nimport { reduxForm } from \"redux-form\";\nimport styles from \"./ProfileInfo.module.css\";\nimport s from \"../../common/FormsControls/FormsControls.module.css\";\n\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>{<button onClick={() => {}}>Save</button>}</div>\n      <div>{error && <div className={s.formSummaryError}>{error}</div>}</div>\n      <div>Full name: {createField(\"fullName\", Input, [], \"Full name\")}</div>\n      <div>\n        Looking for a job:\n        {createField(\"lookingForAJob\", Input, [], \"\", { type: \"checkbox\" })}\n      </div>\n      <div>\n        My professional skills:\n        {createField(\n          \"lookingForAJobDescription\",\n          Textarea,\n          [],\n          \"My professional skills\"\n        )}\n      </div>\n      <div>\n        About me:\n        {createField(\"aboutMe\", Textarea, [], \"About me\")}\n      </div>\n      <div>\n        <b>Contacts:</b>\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <div key={key} className={styles.contact}>\n              {key}: {createField(\"contacts.\" + key, Input, [], key)}\n            </div>\n          );\n        })}\n      </div>\n    </form>\n  );\n};\n\nconst ProfileDataFormReduxForm = reduxForm({\n  form: \"edit-profile\",\n})(ProfileDataForm);\n\nexport default ProfileDataFormReduxForm;\n","import styles from \"./ProfileInfo.module.css\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport userPhoto from \"../../../assets/images/profile-picture-not-found.png\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport { useState } from \"react\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({\n  profile,\n  isOwner,\n  status,\n  updateStatus,\n  savePhoto,\n  saveProfile,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const onMainPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  const onSubmit = async (formData) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  };\n\n  return (\n    <div>\n      <div className={styles.descriptionBlock}>\n        <img\n          className={styles.mainPhoto}\n          src={profile.photos.large || userPhoto}\n          alt=\"\"\n        />\n        {isOwner ? <input type=\"file\" onChange={onMainPhotoSelected} /> : null}\n        <div>\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n        </div>\n\n        {editMode ? (\n          <ProfileDataForm\n            initialValues={profile}\n            profile={profile}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <ProfileData\n            profile={profile}\n            isOwner={isOwner}\n            goToEditMode={() => setEditMode(true)}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\n  return (\n    <div>\n      <div>{isOwner && <button onClick={goToEditMode}>Edit info</button>}</div>\n      <div>Full name: {profile.fullName}</div>\n      <div>Looking for a gob: {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\n      {profile.lookingForAJob && (\n        <div>My professional skills: {profile.lookingForAJobDescription}</div>\n      )}\n      <div>About me: {profile.aboutMe}</div>\n      <div>\n        <b>Contacts:</b>\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst Contact = ({ contactTitle, contactValue }) => {\n  return (\n    <div className={styles.contact}>\n      <b>{contactTitle}</b>: {contactValue}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import s from \"./Post.module.css\";\n\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img\n        src=\"https://vectorified.com/images/mystery-person-icon-34.jpg\"\n        alt=\"\"\n      />\n      {props.message}\n      <div className={s.itemLike}>Likes {props.likesCount}</div>\n    </div>\n  );\n};\n\nexport default Post;\n","import s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport {\n  maxLengthCreator,\n  required,\n} from \"../../../utils/validators/validators\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nlet AddNewPostForm = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        <div>\n          <Field\n            component={Textarea}\n            name=\"newPostText\"\n            placeholder=\"Enter your post text\"\n            validate={[required, maxLength10]}\n          ></Field>\n        </div>\n        <div>\n          <button>Send</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nlet AddNewPostFormRedux = reduxForm({\n  form: \"ProfileAddNewPostForm\",\n})(AddNewPostForm);\n\nconst MyPosts = React.memo((props) => {\n  let postsElements = props.posts.map((p) => {\n    return (\n      <Post\n        id={p.id}\n        message={p.message}\n        likesCount={p.likesCount}\n        key={p.id}\n      ></Post>\n    );\n  });\n\n  let onAddPost = (values) => {\n    props.addPost(values.newPostText);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <AddNewPostFormRedux onSubmit={onAddPost} />\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n});\n\nexport default MyPosts;\n","import { addPostCreator } from \"./../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  };\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostCreator(newPostText));\n    },\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport React from \"react\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        profile={props.profile}\n        isOwner={props.isOwner}\n        savePhoto={props.savePhoto}\n        saveProfile={props.saveProfile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {\n  getStatus,\n  getUserProfile,\n  savePhoto,\n  saveProfile,\n  updateStatus,\n} from \"../../redux/profile-reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n  // вызывается единожды\n  componentDidMount() {\n    this.refreshProfile();\n  }\n  // страница перерисовывается, когда меняется state или props\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Profile\n          {...this.props}\n          isOwner={!this.props.match.params.userId}\n          profile={this.props.profile}\n          status={this.props.status}\n          updateStatus={this.props.updateStatus}\n          savePhoto={this.props.savePhoto}\n        />\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile,\n  }),\n  withRouter\n)(ProfileContainer);\n"],"sourceRoot":""}